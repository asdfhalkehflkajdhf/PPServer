/*
* Copyright(c) 2008, 北京一鸣神州科技有限公司 
* All rights reserved
*
* 文件名称:  DBOperation.cpp
* 摘    要:  CDBOperation实现
*
* 当前版本:  1.0
* 作    者:  姜福来
* 完成日期:  2008年10月21日
*/

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <errno.h>
#include <unistd.h>
#include <pthread.h>

#include "assert.h"
#include "StringDefine.h"
#include "Config.h"
#include "DBOperation.h"
#include "Tools.h"

#include "sqlca.h"
#include "sqlda.h"

#define SQLCODE sqlca.sqlcode 
#define SQLNOTFOUND 1403

#define SQLCODE sqlca.sqlcode
#define SQLERRMSG sqlca.sqlerrm.sqlerrmc


static int g_db_debug_switch = 1;
#define G_DB_DEBUG(format,...) \
if (g_db_debug_switch ){                                    \
	printf(format, ##__VA_ARGS__);\
}


CDBOperation* CDBOperation::m_instance = NULL;

CDBOperation::CDBOperation()
{
	CConfig* pConfig = CConfig::Instance() ;
	OpenDB();
}
CDBOperation* CDBOperation::Instance()
{
	if( NULL == m_instance )
	{
		m_instance = new CDBOperation();
	}
	
	return m_instance ;

}

void  CDBOperation::Destory()
{
	if(NULL != m_instance)
	{
		delete m_instance ;
		m_instance = NULL ;
	}
}

CDBOperation::~CDBOperation()
{
	if(m_pDBAccess != NULL)
	{
		CloseDB() ;
	}
}

bool CDBOperation::OpenDB()
{
	CConfig* pConfig = CConfig::Instance() ;

	survival_time = (int )time(NULL);
	m_pDBAccess = (void *)malloc(sizeof(sql_context));
		
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;

		VARCHAR username[32]={0};// = user;
		VARCHAR password[32]={0}; // = passwd;
		VARCHAR dbname[32]={0}; // = db;
    EXEC SQL END DECLARE SECTION;
	
	sprintf((char *)username.arr, "%s", pConfig->DBUser);
	username.len = strlen((char *)username.arr);
	
	strcpy((char *)password.arr, pConfig->DBPassWord);
	password.len = strlen((char *)password.arr);
	
	strcpy((char *)dbname.arr, pConfig->DBName);
	dbname.len = strlen((char *)dbname.arr);
	
    //一定要顺序来
    EXEC SQL ENABLE THREADS; 
    EXEC SQL CONTEXT ALLOCATE :*DBcontest; 
    EXEC SQL CONTEXT USE :*DBcontest;
 	EXEC SQL CONNECT :username IDENTIFIED BY :password  USING :dbname;
    if(SQLCODE)
    {   
		G_DB_DEBUG("%d | %s | open db sql_init fail %s %s %d %s\n",pthread_self(), __FUNCTION__,  pConfig->DBUser, pConfig->DBName, SQLCODE,sqlca.sqlerrm.sqlerrmc);
		EXEC SQL CONTEXT FREE :*DBcontest;
		free(m_pDBAccess);
		m_pDBAccess = NULL;
		return false;
    }   
  
	G_DB_DEBUG("%d | %s | open db ok %s %s %d %s\n",pthread_self(), __FUNCTION__,  pConfig->DBUser, pConfig->DBName, SQLCODE,SQLERRMSG);
 
	return true;
	
}
//bool CDBOperation::OpenDB(const char *user, const char *passwd, const char *db)
bool CDBOperation::OpenDB( const char *host, const char *user, const char *passwd, const char *db, unsigned int port, const char *unix_socket)
{
	(void)host;
	(void)port;
	(void)unix_socket;
	m_pDBAccess = (void *)malloc(sizeof(sql_context));

		struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;

		VARCHAR username[32]={0};// = user;
		VARCHAR password[32]={0}; // = passwd;
		VARCHAR dbname[32]={0}; // = db;
    EXEC SQL END DECLARE SECTION;

	strcpy((char *)username.arr, user);
	username.len = strlen((char *)username.arr);
	
	strcpy((char *)password.arr, passwd);
	password.len = strlen((char *)password.arr);
	
	strcpy((char *)dbname.arr, db);
	dbname.len = strlen((char *)dbname.arr);
	
    //一定要顺序来
    EXEC SQL ENABLE THREADS; 
    EXEC SQL CONTEXT ALLOCATE :*DBcontest; 
    EXEC SQL CONTEXT USE :*DBcontest;
 	EXEC SQL CONNECT :username IDENTIFIED BY :password  USING :dbname;
    if(SQLCODE)
    {   
		G_DB_DEBUG("%d | %s | open db sql_init fail %s %s %d %s\n",pthread_self(), __FUNCTION__, user, db, SQLCODE,sqlca.sqlerrm.sqlerrmc);
		EXEC SQL CONTEXT FREE :*DBcontest;
		free(m_pDBAccess);
		m_pDBAccess = NULL;
		return false;
    }
  
	G_DB_DEBUG("%d | %s | open db ok %s %s %d %s\n",pthread_self(), __FUNCTION__,  user, db, SQLCODE,sqlca.sqlerrm.sqlerrmc);
 
	return true;
	
}
void CDBOperation::CloseDB()
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;
   EXEC SQL END DECLARE SECTION;

    EXEC SQL CONTEXT USE :*DBcontest;
	//EXEC SQL ROLLBACK WORK RELEASE;
    EXEC SQL COMMIT WORK RELEASE;
    EXEC SQL CONTEXT FREE :*DBcontest;
    if(SQLCODE)
    {
        G_DB_DEBUG("%d | %s | Close oracle fail[%d][%s]/n",pthread_self(), __FUNCTION__, sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
    }
    else
    {
		G_DB_DEBUG("%d | %s | close db %d\n",pthread_self(), __FUNCTION__, 	time(NULL) - survival_time );
    }
	
	free(m_pDBAccess);
	m_pDBAccess = NULL;
	
}

int CDBOperation::UpdateBankWorkKey(ST_TranData* stpTranData)
{	
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;
		char szSql[512]={0};
		int nRet;
		
		char szBankMacKey[48]={0};
		char szBankPInKey[48]={0};
		char szTerminalID_41[48]={0};
		char szMerchantID_42[48]={0};
		char szBatchNo[48]={0};
	EXEC SQL END DECLARE SECTION;

	EXEC SQL CONTEXT USE :*DBcontest;
	
	
	if(stpTranData->szTerminalID_41[0]=='\0'  || stpTranData->szMerchantID_42[0]=='\0'){
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"更新银行密钥失败") ;
		memcpy(stpTranData->szRetCode_39,"E6",2);
		return -1;
	}
	
	strcpy(szBankMacKey, stpTranData->szBankMacKey);
	strcpy(szBankPInKey, stpTranData->szBankPInKey);
	strcpy(szTerminalID_41, stpTranData->szTerminalID_41);
	strcpy(szMerchantID_42, stpTranData->szMerchantID_42);
	
	
	
	//动态SQL
	EXEC SQL update tab_platkey SET MacKey=:szBankMacKey, PinKey=:szBankPInKey, SignTime=to_char(sysdate,'yyyy-mm-dd hh24:mi:ss') 
		WHERE PlatTermNo=:szTerminalID_41 AND PlatMerchantNo=:szMerchantID_42;
	if (SQLCODE){
sprintf(szSql, "UPDATE tab_platkey SET MacKey=:'%s', PinKey=:'%s', SignTime=:to_char(sysdate,'yyyy-mm-dd hh24:mi:ss') WHERE PlatTermNo=:'%s' AND PlatMerchantNo=:'%s'", 
		stpTranData->szBankMacKey,stpTranData->szBankPInKey, stpTranData->szTerminalID_41,stpTranData->szMerchantID_42);
G_DB_DEBUG("%d | %s | %s\n",pthread_self(), __FUNCTION__, szSql);
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"更新银行密钥失败[%s] SQLCODE=[%d], SQLMSG=[%s]",szSql, SQLCODE, SQLERRMSG);
		return -1;
	}

	
	strcpy(szBatchNo, stpTranData->szBatchNo);
	

	EXEC SQL UPDATE  tab_platmerterm SET BatchNo=:szBatchNo WHERE PlatTermNo=:szTerminalID_41 AND PlatMerchantID=:szMerchantID_42;

	if (SQLCODE){
sprintf(szSql, "UPDATE  tab_platmerterm SET BatchNo=:'%s' WHERE PlatTermNo=:'%s' AND PlatMerchantID=:'%s'", 
		stpTranData->szBatchNo, stpTranData->szTerminalID_41,stpTranData->szMerchantID_42);
G_DB_DEBUG("%d | %s | %s\n",pthread_self(), __FUNCTION__, szSql);
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"更新银行密钥失败[%s] SQLCODE=[%d], SQLMSG=[%s]",szSql, SQLCODE, SQLERRMSG);
		return -1;
	}

	EXEC SQL COMMIT;
	return 0;
}

int CDBOperation::UpdateBankWorkKey(char* pMerchantID, char* pTermID, char* pPinKey, char* pMacKey, char* pBatchNo)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 
		
		char szBankMacKey[48]={0};
		char szBankPInKey[48]={0};
		char szTerminalID_41[48]={0};
		char szMerchantID_42[48]={0};
		char szBatchNo[48]={0};

		
		char szSql[512]={0};
		int nRet;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL CONTEXT USE :*DBcontest;

	
	if(pTermID[0]=='\0'  || pMerchantID[0]=='\0'){
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"更新银行密钥失败") ;
		return -1;
	}
	
	strcpy(szBankMacKey, pMacKey);
	strcpy(szBankPInKey, pPinKey);
	strcpy(szTerminalID_41, pTermID);
	strcpy(szMerchantID_42, pMerchantID);

	
	
	//动态SQL
	EXEC SQL UPDATE tab_platkey SET MacKey=:szBankMacKey, PinKey=:szBankPInKey, SignTime=to_char(sysdate,'yyyy-mm-dd hh24:mi:ss') WHERE PlatTermNo=:szTerminalID_41 AND PlatMerchantNo=:szMerchantID_42;
	
	if (SQLCODE){
sprintf(szSql, "UPDATE tab_platkey SET MacKey=:'%s', PinKey=:'%s', SignTime=:to_char(sysdate,'yyyy-mm-dd hh24:mi:ss') WHERE PlatTermNo=:'%s' AND PlatMerchantNo=:'%s'", 
	pMacKey,pPinKey, pTermID,pMerchantID);
G_DB_DEBUG("%d | %s | %s \n",pthread_self(), __FUNCTION__, szSql);	
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"更新银行密钥失败[%s] SQLCODE=[%d], SQLMSG=[%s]",szSql, SQLCODE, SQLERRMSG);
		return -1;
	}
	
	strcpy(szBatchNo, pBatchNo);

	EXEC SQL UPDATE  tab_platmerterm SET BatchNo =:szBatchNo WHERE PlatTermNo =:szTerminalID_41 AND PlatMerchantID =:szMerchantID_42;
	if (SQLCODE){
sprintf(szSql, "UPDATE  tab_platmerterm SET BatchNo =:'%s' WHERE PlatTermNo =:'%s' AND PlatMerchantID =:'%s'", 
		pBatchNo, pTermID,pMerchantID);
G_DB_DEBUG("%d | %s | %s\n",pthread_self(), __FUNCTION__, szSql);

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"更新银行密钥失败[%s] SQLCODE=[%d], SQLMSG=[%s]",szSql, SQLCODE, SQLERRMSG);
		return -1;
	}

	EXEC SQL COMMIT;
	return 0;

}



int CDBOperation::GetBankWorkKey(char* pMerchantID, char* pTermID, int& nBankIndex, char* pPinKey, char* pMacKey, char* pTmkKey)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;
		int nKeyIndex=0;
		char strMerchantID[16] = {0};
		char strTermID[9] = {0};
		char strMacKey[50] = {0};
		char strPinKey[050] = {0};
		char strTdkKey[50] = {0};
		char strTmkKey[50] = {0};
		//char strBatchNO[7] = {0};	//20160207，TAB_BANKKEY中批次号无用
	EXEC SQL END DECLARE SECTION;

	
	EXEC SQL CONTEXT USE :*DBcontest;

	
	memcpy(strMerchantID, pMerchantID, 15);
	memcpy(strTermID, pTermID, 8);

G_DB_DEBUG("%d | %s |  start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL SELECT KeyIndex,PinKey,MacKey,TMK,SQLNOTFOUND
			   INTO :nKeyIndex,:strPinKey,:strMacKey,:strTmkKey
			   FROM tab_platkey
			  WHERE PlatTermNo=:strTermID and PlatMerchantNo=:strMerchantID;
	if(SQLCODE == SQLNOTFOUND){
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"SELECT tab_platkey 失败，SQLCODE=[%d], SQLERRMSG=[%s]", SQLCODE, SQLERRMSG);
		return -1;
	}
	if (SQLCODE)
	{
char szSql[512]={0};
sprintf(szSql,"select KeyIndex,PinKey,MacKey,TMK from tab_platkey where PlatTermNo='%s' and PlatMerchantNo='%s' limit 0,1", pTermID, pMerchantID);
G_DB_DEBUG("%d | %s |\n",pthread_self(), __FUNCTION__);	
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"SELECT tab_platkey 失败，SQLCODE=[%d], SQLERRMSG=[%s]", SQLCODE, SQLERRMSG);
		return -1;
	}
	EXEC SQL COMMIT;

	nBankIndex = nKeyIndex;
	strcpy(pMacKey, RTrim(strMacKey));
	strcpy(pPinKey, RTrim(strPinKey));
	strcpy(pTmkKey, RTrim(strTmkKey));
	
	return 0;
}

int CDBOperation::UpdateTermWorkKey(ST_TranData* stpTranData)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;
		
		
		char szTermMacKey[48]={0};
		char szTermPInKey[48]={0};
		char szTermNo[48]={0};

		
		int nRet;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL CONTEXT USE :*DBcontest;

	strcpy(szTermMacKey, stpTranData->szTermMacKey);
	strcpy(szTermPInKey, stpTranData->szTermPInKey);
	strcpy(szTermNo, stpTranData->szTermNo);
	
	
G_DB_DEBUG("%d | %s |  start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL UPDATE tab_termkey SET MacKey=:szTermMacKey, PinKey=:szTermPInKey, TdkKey=:szTermPInKey, SignTime=to_char(sysdate,'yyyy-mm-dd hh24:mi:ss')  WHERE TermNo=:szTermNo;
	
	if (SQLCODE){
char szSql[512]={0};
sprintf(szSql, "UPDATE tab_termkey SET MacKey=:'%s', PinKey=:'%s', TdkKey=:'%s', SignTime=to_char(sysdate,'yyyy-mm-dd hh24:mi:ss')  WHERE TermNo=:'%s'", stpTranData->szTermMacKey,stpTranData->szTermPInKey,stpTranData->szTermPInKey, stpTranData->szTermNo);
G_DB_DEBUG("%d | %s | %s\n",pthread_self(), __FUNCTION__, szSql);
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"更新终端密钥失败[%s] SQLCODE=[%d], SQLMSG=[%s]",szSql, SQLCODE, SQLERRMSG);
		memcpy(stpTranData->szRetCode_39,"E6",2);
		return -1;
	}
	EXEC SQL COMMIT;

	return 0;
}

int CDBOperation::GetTermInfo(ST_TranData* pstTranData)
{

	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;
		char szSql[512]={0};
		int nRet=0;
		int nCanPrint;
		int nProgramType;
		int nUpdateFlag;
		int nTermType;
		char pPlatTermNo[9]={0};
		char pPlatMerchantNo[16]={0};
		int nBankKeyIndex;
		char pPlatTMK[50]={0};
		char pPlatMacK[50]={0};
		char pPlatPinK[50]={0};
		int nTermKeyIndex;
		char pTermTMK[50]={0};
		char pTermMaK[50]={0};
		char pTermPinK[50]={0};
		char pTermTdK[50]={0};
		char pEnctype[5]={0};
		char pBatchNo[9]={0};
		char pMerchantName[100]={0};
		int nTradeType;
		char pT0PlatTermNo[9]={0};
		char pT0PlatMerchantNo[16]={0};

		char pTermNo[9]={0};
		char pTranCode[5]={0};
	EXEC SQL END DECLARE SECTION;

	if(pstTranData->isGetTermInfo){
		return 0;
	}
	pstTranData->isGetTermInfo = 1;

	EXEC SQL CONTEXT USE :*DBcontest;

	
	
	strcpy(pTermNo, pstTranData->szTermNo);
	strcpy(pTranCode, pstTranData->szTranType);
//pstTranData->szTermNo, pstTranData->szTranType

	if( strcmp(pstTranData->szTranType, "T108")==0 || strcmp(pstTranData->szTranType, "T109") == 0){
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
		EXEC SQL SELECT PosT0TermNo, PosT0MerchantID,CanPrint,ProgramType,UpdateFlag,TermType 
		INTO :pPlatTermNo, :pPlatMerchantNo, :nCanPrint, :nProgramType, :nUpdateFlag, :nTermType
		FROM tab_term WHERE termNo=:pTermNo  and rownum<=1;
		if(SQLCODE == SQLNOTFOUND){
			nRet = 1;
G_DB_DEBUG("%d | %s | 1\n",pthread_self(), __FUNCTION__);
			goto LABLE_ERROR;
		}
	}else if( strcmp(pstTranData->szTranType, "TS02")==0 || strcmp(pstTranData->szTranType, "TS03") == 0){
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
		EXEC SQL SELECT STTermNo, STMerchantID,CanPrint,ProgramType,UpdateFlag,TermType 
		INTO :pPlatTermNo, :pPlatMerchantNo, :nCanPrint, :nProgramType, :nUpdateFlag, :nTermType
		FROM tab_term WHERE termNo=:pTermNo  and rownum<=1;
		if(SQLCODE == SQLNOTFOUND){
			nRet = 1;
G_DB_DEBUG("%d | %s | 1\n",pthread_self(), __FUNCTION__);
			goto LABLE_ERROR;
		}
	}else{
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
		
		EXEC SQL SELECT PosTermNo,PosMerchantID,PosT0TermNo,PosT0MerchantID,CanPrint,ProgramType,UpdateFlag,TermType 
			INTO :pPlatTermNo, :pPlatMerchantNo, :pT0PlatTermNo, :pT0PlatMerchantNo, :nCanPrint, :nProgramType, :nUpdateFlag, :nTermType
			FROM tab_term WHERE termNo=:pTermNo  and rownum<=1;
		
		if( SQLCODE == SQLNOTFOUND){
			nRet = 1;
G_DB_DEBUG("%d | %s | 2\n",pthread_self(), __FUNCTION__);
			goto LABLE_ERROR;
		}
		if(pPlatTermNo[0]=='\0' || strcmp(pPlatTermNo, "        ")==0){
			if( nProgramType!=2 ){
				nRet = 1;
G_DB_DEBUG("%d | %s | 3 SELECT PosTermNo,PosMerchantID,PosT0TermNo,PosT0MerchantID,CanPrint,ProgramType,UpdateFlag,TermType FROM tab_term   WHERE termNo=%s\n",pthread_self(), __FUNCTION__, pTermNo);
				goto LABLE_ERROR;
			}

			strcpy(pPlatTermNo , pT0PlatTermNo);
			strcpy(pPlatMerchantNo , pT0PlatMerchantNo);
		}
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	
	//-- 如果是二型机 则需要获取pinkey和mackey
		EXEC SQL SELECT KeyIndex,TMK,MacKey,PinKey,TdkKey 
			INTO :nTermKeyIndex, :pTermTMK, :pTermMaK, :pTermPinK, :pTermTdK
			FROM tab_termkey WHERE TermNo=:pTermNo  and rownum<=1;
		if( SQLCODE == SQLNOTFOUND){
			nRet = 6;
G_DB_DEBUG("%d | %s | 4 SELECT KeyIndex,TMK,MacKey,PinKey,TdkKey FROM tab_termkey WHERE TermNo=%s  and rownum<=1; \n",pthread_self(), __FUNCTION__, pTermNo);
			goto LABLE_ERROR;
		}
	}
	
	
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	//-- 获取交易类型
	EXEC SQL SELECT TYPE 
		INTO :nTradeType 
		FROM tab_trantype WHERE TranCode=:pTranCode  and rownum<=1;
	
	if(SQLCODE == SQLNOTFOUND){
		nRet = 2;
G_DB_DEBUG("%d | %s | 5 SELECT TYPE FROM tab_trantype WHERE TranCode=%s  and rownum<=1; \n",pthread_self(), __FUNCTION__, pTranCode);
		goto LABLE_ERROR;
	}
	//-- 获取银联终端信息
	if(nTradeType == 1 || strcmp(pTranCode, "T051")==0){
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
		//-- 获取消费银联商户信息
		EXEC SQL SELECT  Enctype,BatchNo,MerchantName 
			INTO :pEnctype, :pBatchNo, :pMerchantName
			FROM tab_platmerterm WHERE PlatTermNo=:pPlatTermNo AND PlatMerchantID=:pPlatMerchantNo  and rownum<=1;
		if( SQLCODE == SQLNOTFOUND){
			nRet = 3;
G_DB_DEBUG("%d | %s | 6  SELECT  Enctype,BatchNo,MerchantName FROM tab_platmerterm WHERE PlatTermNo=%s AND PlatMerchantID=%s  and rownum<=1;\n",pthread_self(), __FUNCTION__, pPlatTermNo, pPlatMerchantNo);
			goto LABLE_ERROR;
		}
		
	}
	//-- 获取银联密钥信息
	EXEC SQL SELECT KeyIndex,TMK, MacKey,PinKey 
		INTO :nBankKeyIndex, :pPlatTMK, :pPlatMacK, :pPlatPinK
		FROM tab_platkey WHERE PlatTermNo=:pPlatTermNo AND PlatMerchantNo=:pPlatMerchantNo  and rownum<=1;
	if(SQLCODE == SQLNOTFOUND){
		nRet = 5;
G_DB_DEBUG("%d | %s | 7 SELECT KeyIndex,TMK, MacKey,PinKey FROM tab_platkey WHERE PlatTermNo=%s AND PlatMerchantNo=%s  and rownum<=1;\n",pthread_self(), __FUNCTION__, pPlatTermNo, pPlatMerchantNo);
		goto LABLE_ERROR;
	}
	EXEC SQL COMMIT;

	pstTranData->nCanPrint = nCanPrint;
	pstTranData->nProgramType = nProgramType;
	pstTranData->nUpdateFlag = nUpdateFlag;
	pstTranData->nTermType = nTermType;
	
	strcpy(pstTranData->szTerminalID_41, RTrim(pPlatTermNo));
	strcpy(pstTranData->szMerchantID_42, RTrim(pPlatMerchantNo));
	strcpy(pstTranData->szBankTMKey, RTrim(pPlatTMK));
	strcpy(pstTranData->szBankMacKey, RTrim(pPlatMacK));

	strcpy(pstTranData->szBankPInKey, RTrim(pPlatPinK));
	strcpy(pstTranData->szTermTMKey, RTrim(pTermTMK));
	strcpy(pstTranData->szTermMacKey, RTrim(pTermMaK));
	strcpy(pstTranData->szTermPInKey, RTrim(pTermPinK));

	pstTranData->nBankKeyIndex = nBankKeyIndex;
	pstTranData->nTermKeyIndex = nTermKeyIndex;
	
	strcpy(pstTranData->szTermTdkKey, RTrim(pTermTdK));
	strcpy(pstTranData->szBatchNo, RTrim(pBatchNo));
	strcpy(pstTranData->szEnctype, RTrim(pEnctype));
	strcpy(pstTranData->szMerchantName, RTrim(pMerchantName));

	return 0;
LABLE_ERROR:

	memcpy(pstTranData->szRetCode_39,"D1",2);
	if(nRet==1)
	{
		memcpy(pstTranData->szRetCode_39,"D1",2);
	}
	else if(nRet==2)
	{
		memcpy(pstTranData->szRetCode_39,"D2",2);
	}
	else if(nRet==3)
	{
		memcpy(pstTranData->szRetCode_39,"D3",2);
	}
	else if(nRet==4)
	{
		memcpy(pstTranData->szRetCode_39,"E9",2);
	}
	else if(nRet==5)
	{
		memcpy(pstTranData->szRetCode_39,"D6",2);
	}
	else if(nRet==6)
	{
		memcpy(pstTranData->szRetCode_39,"D7",2);
	}
	else if(nRet==7 )
	{
		memcpy(pstTranData->szRetCode_39,"A0",2);
	}
	else if(nRet==8 )
	{
		memcpy(pstTranData->szRetCode_39,"A0",2);
	}
	LogTransMsg((char *)__FILE__, __LINE__, (char *)"获取终端信息失败[%s] [%d] SQLCODE=[%d], SQLMSG=[%s]", pstTranData->szRetCode_39, nRet, SQLCODE, SQLERRMSG);
	return nRet;

}
int	CDBOperation::GetBankSerialNo(ST_TranData* stpTranData)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 
		char sSerialNo[7] = {0};
		int nSerialNo=0;
		char szBatchNo[8] = {0};
		int nBatchAddFlag = 0;
		
		char pTermID[9]={0};
		char pMerchantID[18]={0};
		char szSql[512] = {0};
	EXEC SQL END DECLARE SECTION;

	EXEC SQL CONTEXT USE :*DBcontest;

	strcpy(pTermID, stpTranData->szTerminalID_41);
	strcpy(pMerchantID, stpTranData->szMerchantID_42);

G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	
	EXEC SQL select SerialNo, BatchNo 
		into :sSerialNo, :szBatchNo
		from tab_platmerterm where PlatMerchantID=:pMerchantID and PlatTermNo=:pTermID for UPDATE;
	
	if (SQLCODE){
G_DB_DEBUG("%d | %s 1\n",pthread_self(), __FUNCTION__);
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"更新终端密钥失败[%s] SQLCODE=[%d], SQLMSG=[%s]",szSql, SQLCODE, SQLERRMSG);
		memcpy(stpTranData->szRetCode_39,"D4",2);
		return -1;
	}

	nSerialNo = atoi(sSerialNo);
	if (nSerialNo >= 999999)
	{
		nSerialNo = 1;
		if (nBatchAddFlag == 1)
		{
			if (atol(szBatchNo) >= 999999)
				memcpy(szBatchNo, "000001", 6);
			else
				sprintf(szBatchNo, "%06ld", (atol(szBatchNo)+1));
		}
	}
	else
		nSerialNo += 1;
	sprintf(stpTranData->szTraceNumber_11, "%06ld", nSerialNo);
	strcpy(stpTranData->szBatchNo, RTrim(szBatchNo));

	EXEC SQL UPDATE tab_platmerterm SET SerialNo=:sSerialNo, BatchNo=:szBatchNo where PlatMerchantID=:pMerchantID and PlatTermNo=:pTermID;
	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"获取流水号失败[%s] SQLCODE=[%d], SQLMSG=[%s]",szSql, SQLCODE, SQLERRMSG);
		memcpy(stpTranData->szRetCode_39,"D4",2);
		return -1;
	}
	EXEC SQL COMMIT;

	return 0;
}

int	CDBOperation::GetBankSerialNo(const char* pPlatMerchantID, const char* pPlatTermNo, char* pSerialNo, char* pBatchNo)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 
		char sSerialNo[7] = {0};
		char szBatchNo[8] = {0};
		int nSerialNo=0;
		int nBatchAddFlag = 0;
		
		char pTermID[9]={0};
		char pMerchantID[18]={0};
		char szSql[512] = {0};
	EXEC SQL END DECLARE SECTION;

	EXEC SQL CONTEXT USE :*DBcontest;

	strcpy(pTermID, pPlatTermNo);
	strcpy(pMerchantID, pPlatMerchantID);
	
	
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL select SerialNo, BatchNo 
		into :sSerialNo, :szBatchNo
		from tab_platmerterm where PlatMerchantID=:pMerchantID and PlatTermNo=:pTermID for UPDATE;
	
	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"获取流水号失败[%s] SQLCODE=[%d], SQLMSG=[%s]",szSql, SQLCODE, SQLERRMSG);
		return -1;
	}

	nSerialNo = atoi(sSerialNo);
	if (nSerialNo >= 999999)
	{
		nSerialNo = 1;
		if (nBatchAddFlag == 1)
		{
			if (atol(szBatchNo) >= 999999)
				memcpy(szBatchNo, "000001", 6);
			else
				sprintf(szBatchNo, "%06ld", (atol(szBatchNo)+1));
		}
	}
	else
		nSerialNo += 1;
	
	sprintf(pSerialNo, "%06ld", nSerialNo) ;
	sprintf(pBatchNo, "%06ld", atol(szBatchNo));
	sprintf(sSerialNo, "%06ld", nSerialNo);

	
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL UPDATE tab_platmerterm SET SerialNo=:sSerialNo, BatchNo=:szBatchNo where PlatMerchantID=:pMerchantID and PlatTermNo=:pTermID;
	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"更新终端密钥失败[%s] SQLCODE=[%d], SQLMSG=[%s]",szSql, SQLCODE, SQLERRMSG);
		return -1;
	}
	EXEC SQL COMMIT;
	return 0;
}


void CDBOperation::GetErrInfo(const char* pErrCode,char* pErrInfo)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 
		char szSql[512]={0};
		char pErrMeaning[256]={0};
		char strErrCode[9]={0};
		int nRet;
	EXEC SQL END DECLARE SECTION;

	EXEC SQL CONTEXT USE :*DBcontest;

	strcpy(strErrCode, pErrCode);

	
G_DB_DEBUG("%d | %s | start select ErrMeaning from tab_errinfo where ErrCode=%s\n",pthread_self(), __FUNCTION__, pErrCode);	
	EXEC SQL select ErrMeaning 
		into :pErrMeaning
		from tab_errinfo where ErrCode=:strErrCode and rownum<=1;
	
	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"GetErrInfo 获取错误信息失败[%s] SQLCODE=[%d], SQLMSG=[%s]",szSql, SQLCODE, SQLERRMSG);
		strcpy(pErrInfo,"交易失败，请稍后重试");
		return ;
	}
	RTrim(pErrMeaning);
	EXEC SQL COMMIT;
	strcpy(pErrInfo, pErrMeaning);
	
}

void CDBOperation::GetErrShowInfo(const char* pErrCode,char* pErrInfo)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 
		char szSql[512]={0};
		char pErrMeaning[256]={0};
		char strErrCode[9]={0};
		int nRet;
    EXEC SQL END DECLARE SECTION;

	EXEC SQL CONTEXT USE :*DBcontest;

	strcpy(strErrCode, pErrCode);

	
G_DB_DEBUG("%d | %s | start select ShowInfo from tab_errinfo where ErrCode=%s\n",pthread_self(), __FUNCTION__, pErrCode);	
	EXEC SQL select ShowInfo
		into :pErrMeaning
		from tab_errinfo where ErrCode=:strErrCode and rownum<=1;
	
	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"GetErrShowInfo 获取错误信息失败[%s] SQLCODE=[%d], SQLMSG=[%s]",szSql, SQLCODE, SQLERRMSG);
		strcpy(pErrInfo,"交易失败，请稍后重试");
		return ;
	}
	RTrim(pErrMeaning);
	EXEC SQL COMMIT;
	strcpy(pErrInfo, pErrMeaning);


}

void CDBOperation::RecordTranData(ST_TranData* stpTranData)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 
		char pTermNo	[9]={0};
		char pTranType	[21]={0};
		char pInAccount	[51]={0};
		char pOutAccount	[25]={0};
		char pTermSerno	[9]={0};
		char pPlatSerno	[9]={0};
		char pBankRetCode      [3]={0};
		char pReferenceNo [16]={0};
		char pThirdRetCode [8]={0};
		char pPlatTermNo [9]={0};
		char pPlatMerchantNo [16]={0};
		char pBatchNo [7]={0};
		int nCancelFlag;
		char pAuthorCode [7]={0};
		char pOriganSerialNo [51]={0};
		char pOriganLocaldate [11]={0};
		char pAcquiringIDCode [21]={0};
		char pCardSequnce [51]={0};
		int pIsICCardTrade;
		char pEquipmentID [20]={0};
		char pIssuerNo [12]={0};
		char pAcquirerNo [12]={0};
		
		long long nTranAmt ;
		char pLocalDate [11]={0};
		char pLocalTime	[11]={0};
		char pBankDate [11]={0};
		char pBankTime [11]={0};
    EXEC SQL END DECLARE SECTION;

	
	
	EXEC SQL CONTEXT USE :*DBcontest;

	strcpy(pTermNo, stpTranData->szTermNo);
	strcpy(pTranType, stpTranData->szTranType);
	
	if(strlen(stpTranData->szTermNo) <= 0 || strlen(stpTranData->szTranType)<=0 || strlen(stpTranData->szAmount_4)<=0
		|| strlen(stpTranData->szLocalDate)<= 0 || strlen(stpTranData->szLocalTime)<=0 || strlen(stpTranData->szRetCode_39)<=0){
			LogTransMsg((char *)__FILE__, __LINE__, (char *)"记账失败") ;
			return  ;
	}
	
	
	nTranAmt = atoll(stpTranData->szAmount_4);
	//-- 格式化日期时间，程序里都是 MMDD和HHMMSS格式，要改为 YYYY-MM-DD和 HH：MM：SS格式
	struct tm *ptr; 
	time_t localTime; 
	localTime=time(NULL); 
	ptr=localtime(&localTime); 
	if(strlen(stpTranData->szLocalDate) == 4){
		strftime(pBankDate,10,"%Y",ptr); 
		memcpy(pLocalDate, pBankDate, 4);
		pLocalDate[4]='-';
		pLocalDate[7]='-';
		memcpy(pLocalDate+5, stpTranData->szLocalDate, 2);
		memcpy(pLocalDate+8, stpTranData->szLocalDate+2, 2);
		
	}else{
		memcpy(pLocalDate, stpTranData->szLocalDate, 4);
		pLocalDate[4]='-';
		pLocalDate[7]='-';
		memcpy(pLocalDate+5, stpTranData->szLocalDate+4, 2);
		memcpy(pLocalDate+8, stpTranData->szLocalDate+6, 2);
	}
	if(strlen(stpTranData->szLocalTime)==6){
		memcpy(pLocalTime, stpTranData->szLocalTime, 2);
		pLocalTime[2]=':';
		pLocalTime[5]=':';
		memcpy(pLocalTime+3, stpTranData->szLocalTime+2, 2);
		memcpy(pLocalTime+6, stpTranData->szLocalTime+4, 2);
	}else if(strlen(stpTranData->szLocalTime)==8){
		strcpy(pLocalTime, stpTranData->szLocalTime);
	}
	
	
	//-- 格式化日期时间，程序里都是 MMDD和HHMMSS格式，要改为 YYYY-MM-DD和 HH：MM：SS格式
	
	strftime(pBankDate,11,"%Y-%m-%d",ptr); 
	strftime(pBankTime,11,"%T",ptr); 

	if(strlen(stpTranData->szBankDate_13) == 4){
		memcpy(pBankDate+5, stpTranData->szBankDate_13, 2);
		memcpy(pBankDate+8, stpTranData->szBankDate_13+2, 2);
	};
	
	if(strlen(stpTranData->szBankDate_13) == 8){
		memcpy(pBankDate, stpTranData->szBankDate_13, 4);
		pBankDate[4]='-';
		pBankDate[7]='-';
		memcpy(pBankDate+5, stpTranData->szBankDate_13+4, 2);
		memcpy(pBankDate+8, stpTranData->szBankDate_13+6, 2);
	}

	if(strlen(stpTranData->szBankTime_12) == 6){
		memcpy(pBankTime, stpTranData->szBankTime_12, 2);
		pBankTime[2]=':';
		pBankTime[5]=':';
		memcpy(pBankTime+3, stpTranData->szBankTime_12+2, 2);
		memcpy(pBankTime+6, stpTranData->szBankTime_12+4, 2);
	}
	
	strcpy(pTermSerno, stpTranData->szTermSerno);
	strcpy(pPlatSerno, stpTranData->szTraceNumber_11);
	strcpy(pInAccount, stpTranData->szInAccount);
	strcpy(pOutAccount, stpTranData->szOutAccount_2);
	strcpy(pBankRetCode, stpTranData->szRetCode_39);
	
	strcpy(pReferenceNo, stpTranData->szReferenceNumber_37);
	strcpy(pThirdRetCode, stpTranData->szThirdRetCode);
	strcpy(pPlatTermNo, stpTranData->szTerminalID_41);
	strcpy(pPlatMerchantNo, stpTranData->szMerchantID_42);
	strcpy(pBatchNo, stpTranData->szBatchNo);
	

	nCancelFlag = stpTranData->nCancelFlag;
	strcpy(pAuthorCode, stpTranData->szAuthCode_38);
	strcpy(pOriganSerialNo, stpTranData->szOriginalSerNo);
	strcpy(pOriganLocaldate, stpTranData->szOriginalTranDate);
	strcpy(pAcquiringIDCode, stpTranData->szAcquiringIDCode_32);
	
	strcpy(pCardSequnce, stpTranData->szCardSequenceNumber_23);
	pIsICCardTrade = stpTranData->nIsICCardTrade;
	strcpy(pEquipmentID, stpTranData->szEquipmentID);
	strcpy(pIssuerNo, stpTranData->szIssuerNo);
	strcpy(pAcquirerNo, stpTranData->szAcquirerNo);
	

G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	//-- 加入交易信息
	EXEC SQL INSERT INTO tab_support 
	(TermNo, TranType, TermSerialNo, InAccount, OutAccount , TranAmt,PlatSerialNo, 
	 LocalDate, LocalTime, BankDate, BankTime, BankRetCode, ThirdRetCode,
	  ReferenceNumber,CancelFlag,PlatTermno,PlatMerchantNo,AuthorCode,BatchNo, OriganSerialNo, 
	  OriganLocaldate ,AcquiringIDCode, CardSequnce, IsICCardTrade,EquipmentID,IssuerNo,AcquirerNo)
	 VALUES (:pTermNo, :pTranType, :pTermSerno, :pInAccount, :pOutAccount, :nTranAmt,:pPlatSerno,
	  :pLocalDate,:pLocalTime, :pBankDate, :pBankTime,:pBankRetCode, :pThirdRetCode,
	   :pReferenceNo,:nCancelFlag,:pPlatTermNo,:pPlatMerchantNo,:pAuthorCode,:pBatchNo, :pOriganSerialNo, 
	   :pOriganLocaldate,:pAcquiringIDCode,:pCardSequnce,:pIsICCardTrade,:pEquipmentID,:pIssuerNo,:pAcquirerNo);
	

	
	if (SQLCODE){
G_DB_DEBUG("%d | %s \n",pthread_self(), __FUNCTION__);
G_DB_DEBUG("CALL RecordTradeData( '%s', '%s', '%s', '%s', '%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%d','%s','%s','%s','%s','%s','%d','%s','%s','%s')",
		stpTranData->szTermNo,stpTranData->szTranType,stpTranData->szAmount_4,stpTranData->szInAccount,stpTranData->szOutAccount_2,
		stpTranData->szTermSerno,stpTranData->szTraceNumber_11,stpTranData->szLocalDate,stpTranData->szLocalTime,stpTranData->szBankDate_13,
		stpTranData->szBankTime_12,stpTranData->szRetCode_39,stpTranData->szReferenceNumber_37,stpTranData->szThirdRetCode,
		stpTranData->szTerminalID_41,stpTranData->szMerchantID_42,stpTranData->szBatchNo,stpTranData->nCancelFlag,stpTranData->szAuthCode_38, 
		stpTranData->szOriginalSerNo, stpTranData->szOriginalTranDate,stpTranData->szAcquiringIDCode_32, stpTranData->szCardSequenceNumber_23, 
		stpTranData->nIsICCardTrade, stpTranData->szEquipmentID, stpTranData->szIssuerNo, stpTranData->szAcquirerNo) ;

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"记账失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		return ;
	}
	//-- 设置退货标志
	if (strcmp("00" , pBankRetCode)==0 && strcmp("T104" , pTranType)==0  ){
G_DB_DEBUG("%d | %s | UPDATE tab_support SET ReturnFlag=1 WHERE PlatSerialNo='%s' AND TermNo='%s' AND  LocalDate='%s' ;\n",pthread_self(), __FUNCTION__, pOriganSerialNo, pTermNo, pOriganLocaldate);	
		EXEC SQL UPDATE tab_support SET ReturnFlag=1 WHERE PlatSerialNo=:pOriganSerialNo AND TermNo=:pTermNo AND  LocalDate=:pOriganLocaldate ;
	}
	//-- 设置撤销标志
	if (strcmp("00" , pBankRetCode)==0 && strcmp("T103" , pTranType)==0  ){
G_DB_DEBUG("%d | %s | UPDATE tab_support SET CancelFlag=1 WHERE PlatSerialNo=%s AND TermNo=%s AND  LocalDate=%s ;\n",pthread_self(), __FUNCTION__, pOriganSerialNo , pTermNo, pOriganLocaldate);
		EXEC SQL UPDATE tab_support SET CancelFlag=1 WHERE PlatSerialNo=:pOriganSerialNo AND TermNo=:pTermNo AND  LocalDate=:pOriganLocaldate ;
	}
	EXEC SQL COMMIT;

}

void CDBOperation::RecordScriptData(ST_TranData* stpTranData)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 
		char pTermNo	[9]={0};
		char pTranAmt	[13]={0};
		char pTermSerno	[7]={0};
		char pPlatSerno	[7]={0};
		char pCardNo	[23]={0};
		char pBankRetCode      [3]={0};
		char pPlatTermNo		[9]={0};
		char pPlatMerchantNo	 [16]={0};
		char pBatchNo [7]={0};
		int nIsNeedToSendScript;
		char pAuthorCode [7]={0};
		char pProcessingCode [7]={0};
		char pSequenceNumber [4]={0};
		char pAcquiringIDCode [12]={0};
		int nPinInPutType;

		long long  nTranAmt;
		char pBankDate [11]={0};
		char pBankTime [11]={0};
    EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;
	
	if(strlen(stpTranData->szTermNo)<=0 || strlen(stpTranData->szAmount_4)<=0 || strlen(stpTranData->szRetCode_39)!=2){
			LogTransMsg((char *)__FILE__, __LINE__, (char *)"记录脚本信息失败") ;
			return  ;
	}
	

	strcpy(pTermNo, stpTranData->szTermNo);

	
	nTranAmt = atoll(stpTranData->szAmount_4);
	
	strcpy(pTermSerno, stpTranData->szTermSerno);
	strcpy(pPlatSerno, stpTranData->szTraceNumber_11);
	strcpy(pCardNo, stpTranData->szOutAccount_2);
	strcpy(pBankRetCode, stpTranData->szRetCode_39);
	
	strcpy(pPlatTermNo, stpTranData->szTerminalID_41);
	strcpy(pPlatMerchantNo, stpTranData->szMerchantID_42);
	strcpy(pBatchNo, stpTranData->szBatchNo);
	nIsNeedToSendScript = stpTranData->nIsNeedToSendScript;
	
	strcpy(pAuthorCode, stpTranData->szAuthCode_38);
	strcpy(pProcessingCode, stpTranData->szProcessingCode_3);
	strcpy(pSequenceNumber, stpTranData->szCardSequenceNumber_23);
	strcpy(pAcquiringIDCode, stpTranData->szAcquiringIDCode_32);
	
	nPinInPutType = stpTranData->nPinInPutType;

	
	//-- 格式化日期时间，程序里都是 MMDD和HHMMSS格式，要改为 YYYY-MM-DD和 HH：MM：SS格式
		
	struct tm *ptr; 
	time_t localTime; 
	localTime=time(NULL); 
	ptr=localtime(&localTime); 
	strftime(pBankDate,11,"%Y-%m-%d",ptr); 
	strftime(pBankTime,11,"%T",ptr); 

	if(strlen(stpTranData->szBankDate_13) == 4){
		memcpy(pBankDate+5, stpTranData->szBankDate_13, 2);
		memcpy(pBankDate+8, stpTranData->szBankDate_13+2, 2);
	};
	
	if(strlen(stpTranData->szBankDate_13) == 8){
		memcpy(pBankDate, stpTranData->szBankDate_13, 4);
		pBankDate[4]='-';
		pBankDate[7]='-';
		memcpy(pBankDate+5, stpTranData->szBankDate_13+4, 2);
		memcpy(pBankDate+8, stpTranData->szBankDate_13+6, 2);
	}

	if(strlen(stpTranData->szBankTime_12) == 6){
		memcpy(pBankTime, stpTranData->szBankTime_12, 2);
		pBankTime[2]=':';
		pBankTime[5]=':';
		memcpy(pBankTime+3, stpTranData->szBankTime_12+2, 2);
		memcpy(pBankTime+6, stpTranData->szBankTime_12+4, 2);
	}

G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	//-- 加入交易信息
	EXEC SQL insert into tab_scriptinfo (TermNo, PlatSerialNo, TransDate, TransTime, CardNo, PlatMerchantNo, PlatTermNo, TradeMoney, BatchNo, AuthorCode, ProcessingCode, SequenceNumber, AcquiringIDCode, IsNeedToSendScript, PinInPutType) 
	VALUES (:pTermNo, :pPlatSerno, :pBankDate, :pBankTime, :pCardNo ,:pPlatMerchantNo, :pPlatTermNo, :nTranAmt, :pBatchNo, :pAuthorCode, :pProcessingCode, :pSequenceNumber, :pAcquiringIDCode, :nIsNeedToSendScript,:nPinInPutType);

	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);

	G_DB_DEBUG("CALL RecordScriptData('%s', '%s', '%s', '%s', '%s','%s','%s','%s','%s','%s','%s','%d','%s','%s','%s','%s','%d')",
		stpTranData->szTermNo, stpTranData->szAmount_4, stpTranData->szTermSerno,stpTranData->szTraceNumber_11, stpTranData->szBankDate_13,
		stpTranData->szBankTime_12,stpTranData->szOutAccount_2, stpTranData->szRetCode_39, stpTranData->szTerminalID_41, 
		stpTranData->szMerchantID_42,stpTranData->szBatchNo,stpTranData->nIsNeedToSendScript, stpTranData->szAuthCode_38, 
		stpTranData->szProcessingCode_3, stpTranData->szCardSequenceNumber_23, stpTranData->szAcquiringIDCode_32, stpTranData->nPinInPutType) ;

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"记录脚本信息失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		return ;
	}
	EXEC SQL COMMIT;
}

int CDBOperation::RecordTCResult(ST_TranData* stpTranData) 
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 
		char pSeriaNo	[7]={0};
		char pField55	[256]={0};
		char pBatchNo	[7]={0};
		int nSendFlag;
		char pAccountNumber 	[20]={0};
		char pAmount	[13]={0};
		char pServicePointMode 	[5]={0};
		char pTerminalID      [9]={0};
		char pMerchantID		[16]={0};
		char pTranCount	 [3]={0};
		char pICCardType [4]={0};
		char pTranRspCode [4]={0};
		char pAuthAmt [13]={0};
		char pAuthCurrencyType [5]={0};
		char pTermReadAble [3]={0};
		char pAcquiringIDCode [13]={0};
		char pPROCConditionCode [3]={0};
		char pCardSequenceNumber [4]={0};

		char pBankDate [12]={0};
		char pBankTime [12]={0};
		
		char sz55areaData[512] = { 0 } ;
		char szSql[128]={0};
    EXEC SQL END DECLARE SECTION;
	

	if(strlen(stpTranData->szTerminalID_41)<=0){
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"记录TC信息失败 %s SQLCODE=[%d], SQLMSG=[%s]",szSql, SQLCODE, SQLERRMSG);
		return -1 ;
	}
	
	if(strlen(stpTranData->szAmount_4)<=0){
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"记录TC信息失败 %s SQLCODE=[%d], SQLMSG=[%s]",szSql, SQLCODE, SQLERRMSG);
		return -1 ;
	}
	
	EXEC SQL CONTEXT USE :*DBcontest;
	BCDtoASCII(stpTranData->szICData_55, stpTranData->nICData_55_Len, pField55) ;


	strcpy(pSeriaNo, stpTranData->szTraceNumber_11);
	strcpy(pBatchNo, stpTranData->szBatchNo);
	nSendFlag = 0;
	strcpy(pAccountNumber, stpTranData->szOutAccount_2);
	strcpy(pAmount, stpTranData->szAmount_4);
	
	strcpy(pServicePointMode, stpTranData->szServicePointMode_22);
	strcpy(pTerminalID, stpTranData->szTerminalID_41);
	strcpy(pMerchantID, stpTranData->szMerchantID_42);
	strcpy(pTranCount, stpTranData->szTranCount);
	strcpy(pICCardType, stpTranData->szICCardType);
	
	strcpy(pTranRspCode, stpTranData->szTranRspCode);
	strcpy(pAuthAmt, "000000000000");
	strcpy(pAuthCurrencyType, stpTranData->szAuthCurrencyType);
	strcpy(pTermReadAble, stpTranData->szTermReadAble);
	strcpy(pAcquiringIDCode, stpTranData->szAcquiringIDCode_32);
	strcpy(pPROCConditionCode, stpTranData->szPROCConditionCode);
	strcpy(pCardSequenceNumber, stpTranData->szCardSequenceNumber_23 );
	


	//-- 格式化日期时间，程序里都是 MMDD和HHMMSS格式，要改为 YYYY-MM-DD和 HH：MM：SS格式
		
	struct tm *ptr; 
	time_t localTime; 
	localTime=time(NULL); 
	ptr=localtime(&localTime); 
	strftime(pBankDate,11,"%Y-%m-%d",ptr); 
	strftime(pBankTime,11,"%T",ptr); 

	if(strlen(stpTranData->szBankDate_13) == 4){
		memcpy(pBankDate+5, stpTranData->szBankDate_13, 2);
		memcpy(pBankDate+8, stpTranData->szBankDate_13+2, 2);
	};
	
	if(strlen(stpTranData->szBankDate_13) == 8){
		memcpy(pBankDate, stpTranData->szBankDate_13, 4);
		pBankDate[4]='-';
		pBankDate[7]='-';
		memcpy(pBankDate+5, stpTranData->szBankDate_13+4, 2);
		memcpy(pBankDate+8, stpTranData->szBankDate_13+6, 2);
	}

	if(strlen(stpTranData->szBankTime_12) == 6){
		memcpy(pBankTime, stpTranData->szBankTime_12, 2);
		pBankTime[2]=':';
		pBankTime[5]=':';
		memcpy(pBankTime+3, stpTranData->szBankTime_12+2, 2);
		memcpy(pBankTime+6, stpTranData->szBankTime_12+4, 2);
	}
	
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	//-- 加入交易信息
	EXEC SQL insert into tab_tcvalueinfo (SeriaNo, Field55, BatchNo, SendFlag, AccountNumber, Amount, ServicePointMode, TerminalID, MerchantID, TranCount, ICCardType, TranRspCode, AuthAmt, AuthCurrencyType, TermReadAble, PROCConditionCode, CardSequenceNumber,TranDate, TranTime) 
	VALUES (:pSeriaNo, :pField55, :pBatchNo, :nSendFlag, :pAccountNumber ,:pAmount, :pServicePointMode, :pTerminalID, :pMerchantID, :pTranCount, :pICCardType, :pTranRspCode, :pAuthAmt, :pAuthCurrencyType,:pTermReadAble,:pPROCConditionCode, :pCardSequenceNumber, :pBankDate, :pBankTime);
	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);



G_DB_DEBUG("insert into tab_tcvalueinfo (SeriaNo, Field55, BatchNo, SendFlag, AccountNumber, Amount, ServicePointMode, TerminalID, MerchantID, TranCount, ICCardType, TranRspCode, AuthAmt, AuthCurrencyType, TermReadAble, PROCConditionCode, CardSequenceNumber,TranDate, TranTime) VALUES (");
G_DB_DEBUG("%s, %s, %s, %d, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s);\n",
pSeriaNo, pField55, pBatchNo, nSendFlag, pAccountNumber ,pAmount, pServicePointMode, pTerminalID, pMerchantID, pTranCount, pICCardType, pTranRspCode, pAuthAmt, pAuthCurrencyType,pTermReadAble,pPROCConditionCode, pCardSequenceNumber, pBankDate, pBankTime);




		LogTransMsg((char *)__FILE__, __LINE__, (char *)"记录TC信息失败[%s] SQLCODE=[%d], SQLMSG=[%s]",szSql, SQLCODE, SQLERRMSG);
		return -1;
	}
	EXEC SQL COMMIT;

	return 0;		
	
}
int CDBOperation::GetOriginalTranData(ST_TranData* stTranData)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess; 
		char szTermNo[9]={0};
		char szOriginalNo[50]={0};
	
		char szPlatTermNo[9] = { 0 };
		char szPlatMerchantNo[16] = { 0 };


		char pOutAccount[16]={0};
		char pTranAmt[16]={0};
		char pReferenceNumber[16]={0};
		char pBatchNo[16]={0};
		char pBankTime[16]={0};
		char pPlatSerialNo[16]={0};
		char pTranType[16]={0};
		char pCardSequnce[16]={0};
		char pBankRetCode[16]={0};
		
		char pinLocalDate [12]={0};
		char pPlatTermNo[9]={0};
		char pPlatMerchantNO[16]={0};
		
		char sz55areaData[512] = { 0 } ;
		char szSql[128]={0};
    EXEC SQL END DECLARE SECTION;
	
	EXEC SQL CONTEXT USE :*DBcontest;

	strcpy(szTermNo, stTranData->szTermNo);
	
	if(memcmp(stTranData->szTranType,"T104",4)==0 || memcmp(stTranData->szTranType,"T204",4)==0)
	{
		strcpy(pinLocalDate, stTranData->szOriginalTranDate);
		strcpy(szOriginalNo, stTranData->szOriginalReferNumber);

G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
		//退货传入交易参考号来查询。
		EXEC SQL select TranType, CardSequnce,BankRetCode,PlatTermNo,PlatMerchantNO,TranAmt,OutAccount,ReferenceNumber,BatchNo ,Replace(BankTime,':','') as BankTime,PlatSerialNo 
			into :pTranType, :pCardSequnce, :pBankRetCode,:szPlatTermNo,:szPlatMerchantNo,:pTranAmt,:pOutAccount,:pReferenceNumber,:pBatchNo ,:pBankTime,:pPlatSerialNo 
			from tab_support 
			where Localdate=:pinLocalDate and TermNo=:szTermNo and ReferenceNumber=:szOriginalNo;
	}
	else
	{
		strcpy(pinLocalDate, stTranData->szLocalDate);
		strcpy(szOriginalNo, stTranData->szOriginalSerNo);

G_DB_DEBUG("%d | %s | start 6\n",pthread_self(), __FUNCTION__);	
		//非退货传入流水号来查询。
		EXEC SQL select TranType, BankRetCode,PlatTermNo,PlatMerchantNO,TranAmt,OutAccount,ReferenceNumber,BatchNo ,Replace(BankTime,':','') as BankTime,PlatSerialNo 
			into :pTranType, :pBankRetCode,:pPlatTermNo,:pPlatMerchantNO,:pTranAmt,:pOutAccount,:pReferenceNumber,:pBatchNo , :pBankTime,:pPlatSerialNo 
			from tab_support 
			where Localdate=:pinLocalDate and TranType='T102' and TermNo=:szTermNo and PlatSerialNo=:szOriginalNo;
		
	}
	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);

G_DB_DEBUG("select TranType, BankRetCode,PlatTermNo,PlatMerchantNO,TranAmt,OutAccount,ReferenceNumber,BatchNo ,Replace(BankTime,':','') as BankTime,PlatSerialNo from tab_support where Localdate='%s' and TranType='T102' and TermNo='%s' and PlatSerialNo='%s';\n",
pinLocalDate , szTermNo, szOriginalNo);


		LogTransMsg((char *)__FILE__, __LINE__, (char *)"获取原交易信息失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		memcpy(stTranData->szRetCode_39,"D5",2);
		return -1;
	}	
	strcpy(szPlatTermNo, RTrim(pPlatTermNo));
	strcpy(szPlatMerchantNo, RTrim(pPlatMerchantNO));
	
	if(memcmp(stTranData->szTerminalID_41,szPlatTermNo,8)!=0 || memcmp(stTranData->szMerchantID_42,szPlatMerchantNo,15)!=0)
	{
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"发生交易的终端和交易原始终端不一致[%s]",szSql);
		memcpy(stTranData->szRetCode_39,"D5",2);
		return -1;
	}
	strcpy(stTranData->szOutAccount_2, RTrim(pOutAccount));
	strcpy(stTranData->szOriginalAmt, RTrim(pTranAmt));
	strcpy(stTranData->szOriginalReferNumber, RTrim(pReferenceNumber));
	strcpy(stTranData->szOriginalBatchNo, RTrim(pBatchNo));
	strcpy(stTranData->szOriginalTranTime, RTrim(pBankTime));
	strcpy(stTranData->szOriginalSerNo, RTrim(pPlatSerialNo));
	strcpy(stTranData->szOriginalTranType, RTrim(pTranType));
	
	if(memcmp(stTranData->szTranType,"T104",4)==0)
	{
		strcpy(stTranData->szCardSequenceNumber_23, RTrim(pCardSequnce));
	}
	EXEC SQL COMMIT;

	return 0;		

}

//记录冲正
int CDBOperation::RecordCancelInfo(ST_TranData* stpTranData)
{
	
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 
		char pTermNo	[9]={0};
		char pPlatSerialNo	[7]={0};
		char pCardNo [26]={0};
		char pPlatMerchantNo [16]={0};
		char pPlatTermNo [9]={0};
		char pBatchNo [7]={0};
		char pAuthorCode [9]={0};
		int  nIsICCardTrade;
		char pCancelCode [3]={0};
		char pTransType [5]={0};
		char pServerPointMode [5]={0};
		char pCardSeque [5]={0};
		char pCardExpDate [7]={0};
		char pField55 [513]={0};
		char pTradeMoney[13]={0};
		
		char pLocalDate[11]={0};
		char pLocalTime[11]={0};
		char szSql[128]={0};
    EXEC SQL END DECLARE SECTION;
	
		
	
	EXEC SQL CONTEXT USE :*DBcontest;


	strcpy(pTermNo, stpTranData->szTermNo);
	strcpy(pPlatSerialNo, stpTranData->szTraceNumber_11);
	strcpy(pCardNo, stpTranData->szOutAccount_2);
	strcpy(pPlatMerchantNo, stpTranData->szMerchantID_42);
	strcpy(pPlatTermNo, stpTranData->szTerminalID_41);
	
	strcpy(pBatchNo, stpTranData->szBatchNo);
	strcpy(pAuthorCode, stpTranData->szAuthCode_38);
	nIsICCardTrade = stpTranData->nIsICCardTrade;
	strcpy(pCancelCode, "98");
	strcpy(pTransType, stpTranData->szTranType);
	
	strcpy(pServerPointMode, stpTranData->szServicePointMode_22);
	strcpy(pCardSeque, stpTranData->szCardSequenceNumber_23);
	strcpy(pCardExpDate, stpTranData->szExpiredDate_14);
	strcpy(pTradeMoney , stpTranData->szAmount_4);
	
	BCDtoASCII(stpTranData->szICData_55, stpTranData->nICData_55_Len, pField55) ;

	
	
	if(strlen(stpTranData->szTermNo)<=0){
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"记录冲正信息失败[%s]", szSql) ;
		return  -1;
	}
	
	if(strlen(stpTranData->szLocalDate)!=8){
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"记录冲正信息失败[%s]", szSql) ;
		return  -1;
	}
	
	//-- 格式化日期时间，程序里都是 MMDD和HHMMSS格式，要改为 YYYY-MM-DD和 HH：MM：SS格式
	struct tm *ptr; 
	time_t localTime; 
	localTime=time(NULL); 
	ptr=localtime(&localTime); 
	if(strlen(stpTranData->szLocalDate) == 4){
		strftime(pLocalDate,10,"%Y",ptr); 
		pLocalDate[4]='-';
		pLocalDate[7]='-';
		memcpy(pLocalDate+5, stpTranData->szLocalDate, 2);
		memcpy(pLocalDate+8, stpTranData->szLocalDate+2, 2);
		
	}else{
		memcpy(pLocalDate, stpTranData->szLocalDate, 4);
		pLocalDate[4]='-';
		pLocalDate[7]='-';
		memcpy(pLocalDate+5, stpTranData->szLocalDate+4, 2);
		memcpy(pLocalDate+8, stpTranData->szLocalDate+6, 2);
	}
	if(strlen(stpTranData->szLocalTime)==6){
		memcpy(pLocalTime, stpTranData->szLocalTime, 2);
		pLocalTime[2]=':';
		pLocalTime[5]=':';
		memcpy(pLocalTime+3, stpTranData->szLocalTime+2, 2);
		memcpy(pLocalTime+6, stpTranData->szLocalTime+4, 2);
	}else if(strlen(stpTranData->szLocalTime)==8){
		strcpy(pLocalTime, stpTranData->szLocalTime);
	}
	

	
			
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	//-- 加入交易信息
	EXEC SQL insert into tab_cancel (TermNo, PlatSerialNo, TransDate, CardNo, PlatMerchantNo ,
													PlatTermNo, TradeMoney, BatchNo, AuthorCode, IsICCardTrade, 
													CancelCode, TransType, ServicePointMode, CardSequenceNumber, Field55, 
													CardExpDate) 
											VALUES (:pTermNo, :pPlatSerialNo, :pLocalDate, :pCardNo, :pPlatMerchantNo, 
												:pPlatTermNo, :pTradeMoney, :pBatchNo, :pAuthorCode, :nIsICCardTrade, 
												:pCancelCode, :pTransType, :pServerPointMode, :pCardSeque, :pField55, 
												:pCardExpDate);

	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);

	G_DB_DEBUG("CALL RecordCancelData( '%s','%s','%s','%s','%s','%s','%s','%s','%s','%d', '%s','%s','%s','%s','%s','%s')",
		stpTranData->szTermNo,stpTranData->szTraceNumber_11,stpTranData->szLocalDate,stpTranData->szOutAccount_2,stpTranData->szMerchantID_42,
		stpTranData->szTerminalID_41,stpTranData->szAmount_4,stpTranData->szBatchNo,stpTranData->szAuthCode_38, stpTranData->nIsICCardTrade, "98", 
		stpTranData->szTranType, stpTranData->szServicePointMode_22, stpTranData->szCardSequenceNumber_23, stpTranData->szExpiredDate_14, pField55);

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"记录冲正信息失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		return -1;
	}	
	EXEC SQL COMMIT;

	return 0;

}
int CDBOperation::GetCancelInfo(ST_TranData* stpTranData,ST_CancelData* stCancelData)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 
		char pTermNo	[9]={0};
		char pPlatSerialNo	[7]={0};
		char pCardNo [26]={0};
		char pPlatMerchantNo [16]={0};
		char pPlatTermNo [9]={0};
		char pBatchNo [7]={0};
		char pAuthorCode [7]={0};
		int  nIsICCardTrade;
		int nIsCanceled;
		char pCancelCode [3]={0};
		char pTransType [5]={0};
		char pServicePointMode[5]={0};
		char pCardSeque [5]={0};
		char pCardExpDate [7]={0};
		char pField55 [512]={0};
		char pTransDate[11]={0};
		char pTradeMoney[13]={0};
		char pCardSequenceNumber[5]={0};
		

		char szSql[128]={0};
    EXEC SQL END DECLARE SECTION;
	
	
	EXEC SQL CONTEXT USE :*DBcontest;
	
	strcpy(pTermNo, stpTranData->szTermNo);
	strcpy(pPlatSerialNo, stpTranData->szTraceNumber_11);

G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL select PlatSerialNo, TransDate, PlatMerchantNo, PlatTermNo,  TradeMoney, BatchNo, AuthorCode, CardNo, CancelCode,  TransType, ServicePointMode, CardSequenceNumber, Field55, IsICCardTrade, IsCanceled, CardExpDate
	into :pPlatSerialNo, :pTransDate, :pPlatMerchantNo, :pPlatTermNo,  :pTradeMoney, :pBatchNo, :pAuthorCode, :pCardNo, :pCancelCode,  :pTransType, :pServicePointMode, :pCardSequenceNumber, :pField55, :nIsICCardTrade, :nIsCanceled, :pCardExpDate
	from tab_cancel where termNo=:pTermNo and IsCanceled!=1 and SendTimes!=3 and TransDate=to_char(sysdate,'yyyy-mm-dd');
	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
G_DB_DEBUG("select * from tab_cancel where termNo='%s' and IsCanceled!=1 and SendTimes!=3 and TransDate=to_char(sysdate,'yyyy-mm-dd')",stpTranData->szTermNo);

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"GetCancelInfo 获取信息失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		return -1;
	}	
	EXEC SQL COMMIT;

	
	strcpy(stCancelData->szTermNo, stpTranData->szTermNo);

	strcpy(stCancelData->szPlatSerialNo, RTrim(pPlatSerialNo));
		
	strcpy(stCancelData->szTransDate, RTrim(pTransDate));
	strcpy(stCancelData->szPlatMerchantNo, RTrim(pPlatMerchantNo));
	strcpy(stCancelData->szPlatTermNo, RTrim(pPlatTermNo));
	strcpy(stCancelData->szTradeMoney, RTrim(pTradeMoney));
	strcpy(stCancelData->szBatchNo, RTrim(pBatchNo));
	
	strcpy(stCancelData->szAuthorCode, RTrim(pAuthorCode));
	strcpy(stCancelData->szCardNo, RTrim(pCardNo));
	strcpy(stCancelData->szCancelCode, RTrim(pCancelCode));
	
	strcpy(stCancelData->szTransCode, RTrim(pTransType));
	strcpy(stCancelData->szPinType, RTrim(pServicePointMode));
	strcpy(stCancelData->CardSequenceNumber, RTrim(pCardSequenceNumber));
	strcpy(stCancelData->szICData_55, RTrim(pField55));

	stCancelData->nIsICTrade = nIsICCardTrade;
	stCancelData->nIsCanceled = nIsCanceled;
	strcpy(stCancelData->szCardExpDate, RTrim(pCardExpDate));
	
	
	return 0;
}

int CDBOperation::GetScriptInfo(ST_TranData* stpTranData)
{
	
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 
		char pTermNo	[9]={0};
		char pTranAmt	[13]={0};
		char pTermSerno	[7]={0};
		char pPlatSerialNo	[7]={0};
		char pCardNo	[23]={0};
		char pBankRetCode      [3]={0};
		char pPlatTermNo		[9]={0};
		char pPlatMerchantNo	 [16]={0};
		char pBatchNo [7]={0};
		int nIsNeedToSendScript;
		char pAuthorCode [7]={0};
		char pProcessingCode [7]={0};
		char pSequenceNumber [4]={0};
		char pAcquiringIDCode [12]={0};
		int nPinInPutType;

		char pTransDate[11]={0};
		char pCurrencyCode[17]={0};
		char pTradeMoney[13]={0};
		
    EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;

	strcpy(pTermNo, stpTranData->szTermNo);

G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL select CardNo, ProcessingCode, TradeMoney, SequenceNumber ,AcquiringIDCode, AuthorCode, TermNo, PlatMerchantNo, CurrencyCode, IsNeedToSendScript, BatchNo, PlatSerialNo, TransDate, PinInPutType
		into :pCardNo, :pProcessingCode, :pTradeMoney, :pSequenceNumber ,:pAcquiringIDCode,  :pAuthorCode, :pTermNo, :pPlatMerchantNo, :pCurrencyCode, :nIsNeedToSendScript, :pBatchNo, :pPlatSerialNo, :pTransDate, :nPinInPutType
		from tab_scriptinfo 
		where termNo=:pTermNo and IsNeedToSendScript=1 and SendTime!=3 and TransDate=to_char(sysdate,'yyyy-mm-dd');
	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
G_DB_DEBUG("select * from tab_scriptinfo where termNo='%s' and IsNeedToSendScript=1 and SendTime!=3 and TransDate=to_char(sysdate,'yyyy-mm-dd')",stpTranData->szTermNo);

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"GetScriptInfo 获取信息失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		return -1;
	}	
	EXEC SQL COMMIT;

	strcpy(stpTranData->szOutAccount_2 , RTrim(pCardNo));
	strcpy(stpTranData->szProcessingCode_3 , RTrim(pProcessingCode));
	strcpy(stpTranData->szAmount_4 , RTrim(pTradeMoney));
	strcpy(stpTranData->szCardSequenceNumber_23 , RTrim(pSequenceNumber));
	strcpy(stpTranData->szAcquiringIDCode_32 , RTrim(pAcquiringIDCode));

	strcpy(stpTranData->szReferenceNumber_37 , RTrim(pPlatSerialNo));
	strcpy(stpTranData->szAuthCode_38 , RTrim(pAuthorCode));
	strcpy(stpTranData->szTerminalID_41 , RTrim(pTermNo));
	strcpy(stpTranData->szMerchantID_42 , RTrim(pPlatMerchantNo));
	strcpy(stpTranData->szCurrencyCode_49 , RTrim(pCurrencyCode));
	
	stpTranData->nIsNeedToSendScript = nIsNeedToSendScript;
	strcpy(stpTranData->szOriginalSerNo , RTrim(pBatchNo));
	strcpy(stpTranData->szOriginalSerNo , RTrim(pPlatSerialNo));
	strcpy(stpTranData->szOriginalTranDate , RTrim(pTransDate));
	stpTranData->nPinInPutType = nPinInPutType;

	return 0;
	
}

int CDBOperation::UpdateCancelFlag(ST_CancelData* stCancelData)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 

		int nIsCanceled;
		char pTermNo[9]={0};
		char pPlatSerialNo[16]={0};
		
		char szCancelDay[20] = { 0 };
		char szCancelTime[20] = { 0 };
		char szCancleDate[20]={0};
		char pTransDate[20]={0};
    EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;
	
	if(stCancelData->szTermNo[0]=='\0'  || stCancelData->szPlatSerialNo[0]=='\0'){
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"更新冲正结果失败") ;
		return -1;
	}
	GetstrCurDate((char *)"-", szCancelDay);
	GetstrCurTime((char *)":", szCancelTime);
	sprintf(szCancleDate, "%s %s", szCancelDay, szCancelTime);
	
	strcpy(pTermNo, stCancelData->szTermNo);
	strcpy(pPlatSerialNo, stCancelData->szPlatSerialNo);
	strcpy(pTransDate, stCancelData->szTransDate);
	nIsCanceled=stCancelData->nIsCanceled;

	
	
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL UPDATE tab_cancel SET IsCanceled=:nIsCanceled, SendTimes=SendTimes+1, CancelTime=:szCancleDate  WHERE termNo=:pTermNo AND PlatSerialNo=:pPlatSerialNo AND TransDate=:pTransDate;
	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
G_DB_DEBUG( "UPDATE tab_cancel SET IsCanceled='%d', SendTimes=SendTimes+1, CancelTime='%s'  WHERE termNo='%s' AND PlatSerialNo='%s' AND DATEDIFF(TransDate,'%s')=0",
		stCancelData->nIsCanceled, szCancleDate, stCancelData->szTermNo,stCancelData->szPlatSerialNo,stCancelData->szTransDate);
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"更新冲正结果失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		return -1;
	}

G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL UPDATE tab_support SET CancelFlag=:nIsCanceled  WHERE termNo=:pTermNo AND PlatSerialNo=:pPlatSerialNo AND LocalDate=:pTransDate;
	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
G_DB_DEBUG("UPDATE tab_support SET CancelFlag='%d' WHERE TermNo='%s' AND PlatSerialNo='%s' AND DATEDIFF(LocalDate,'%s')=0",
		stCancelData->nIsCanceled,  stCancelData->szTermNo,stCancelData->szPlatSerialNo,stCancelData->szTransDate);
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"更新冲正结果失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		return -1;
	}
	EXEC SQL COMMIT;


	
	return 0;

}

int CDBOperation::UpdateScriptFlag(ST_TranData* stScriptData)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 

		int nIsNeedToSendScript;
		char pTermNo[9]={0};
		char pPlatSerialNo[16]={0};
		
		char szScriptDate[20] = { 0 } ;
		char szScriptDay[20] = { 0 } ;
		char szScriptTime[20] = { 0 } ;
    EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;
	
	if(stScriptData->szTermNo[0] == '\0' || stScriptData->szOriginalSerNo[0] == '\0'  ){
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"更新脚本结果失败") ;
		return -1;
	}
	
	GetstrCurDate((char *)"-", szScriptDay);
	GetstrCurTime((char *)":", szScriptTime);

	sprintf(szScriptDate, "%s %s", szScriptDay, szScriptTime);
	
	strcpy(pTermNo, stScriptData->szTermNo);
	strcpy(pPlatSerialNo, stScriptData->szOriginalSerNo);
	nIsNeedToSendScript=stScriptData->nIsNeedToSendScript;
	
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL UPDATE tab_scriptinfo SET IsNeedToSendScript=:nIsNeedToSendScript ,SendTime=SendTime+1,SendDate=:szScriptDate WHERE termNo=:pTermNo AND PlatSerialNo=:pPlatSerialNo;
	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
G_DB_DEBUG("UPDATE tab_scriptinfo SET IsNeedToSendScript='%s' ,SendTime=SendTime+1,SendDate='%s' WHERE termNo='%s' AND PlatSerialNo='%s'",
		stScriptData->nIsNeedToSendScript, szScriptDate, stScriptData->szTermNo, stScriptData->szOriginalSerNo);

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"更新脚本结果失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		return -1;
	}	
	EXEC SQL COMMIT;
	return 0;

}

/*
* 名称: GetICPKeyInfo
*
* 参数: 
*
* 返回值: >=0: 公钥条数
*		   -1: 没有
*	
* 说明: 获取公钥信息
*
*/
int CDBOperation::GetICPKeyInfo(ListICPKeyDataItem* pICPKeyDataList)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 
		int	nRetCode = 0 ;

		char ptermNo[9]={0};
		char pPlatSerialNo[16]={0};
		
		char pFULLVALUE[1024] = { 0 } ;
    EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;
	

G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
    EXEC SQL DECLARE cur_icpkeyinfo_user CURSOR FOR select FULLVALUE from tab_icpkeyinfo;;    
    EXEC SQL OPEN cur_icpkeyinfo_user;  
  	nRetCode =  0 ;

    while(1)  
    {  
 		ICPKeyDataItem* pICPkeyData = new ICPKeyDataItem ;
       EXEC SQL FETCH cur_icpkeyinfo_user 	into :pFULLVALUE;  
		if (SQLCODE == 1403){
			break;
		}
		RTrim(pFULLVALUE);
		strcpy(pICPkeyData->PKeyBuf, pFULLVALUE);
 		pICPKeyDataList->push_back(pICPkeyData) ;
		nRetCode++ ;
   }  
    EXEC SQL  CLOSE cur_icpkeyinfo_user;
	EXEC SQL COMMIT;
	
	
	return nRetCode;
///////////////////////////
	
}

void CDBOperation::RealeaseICPKeyItem(ListICPKeyDataItem* pListICPKeyDataItem)
{
	ListICPKeyDataItem::iterator it ;
	//释放每个元素
	for (it = pListICPKeyDataItem->begin(); it != pListICPKeyDataItem->end(); )
	{
		ListICPKeyDataItem::iterator tempIt = it++ ;
		if (*tempIt != NULL)
		{
			delete *tempIt ;
			*tempIt = NULL ;
		}
		pListICPKeyDataItem->erase(tempIt) ;
	}
}
/*
* 名称: GetICParmInfo
*
* 参数: 
*
* 返回值: >=0: 参数条数
*		   -1: 没有
*	
* 说明: 获取公钥信息
*
*/
int CDBOperation::GetICParamInfo(ListICParmDataItem* pICParmDataList)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 
		int	nRetCode = 0 ;

		char ptermNo[9]={0};
		char pPlatSerialNo[16]={0};
		
		char pFULLVALUE[1024] = { 0 } ;
    EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;
	

 G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
   EXEC SQL DECLARE cur_icparaminfo_user CURSOR FOR select FULLVALUE from tab_icparaminfo;;    
    EXEC SQL OPEN cur_icparaminfo_user;  
  	nRetCode =  0 ;

    while(1)  
    {  
		ICParmDataItem* pICParamData = new ICParmDataItem ;
       EXEC SQL FETCH cur_icparaminfo_user 	into :pFULLVALUE;  
		if (SQLCODE == 1403){
			break;
		}
		RTrim(pFULLVALUE);
		strcpy(pICParamData->PParmBuf, pFULLVALUE);
		pICParmDataList->push_back(pICParamData) ;
		nRetCode++ ;
   }  
    EXEC SQL  CLOSE cur_icparaminfo_user;
	EXEC SQL COMMIT;
	
	
	return nRetCode;
///////////////////////////
}

void CDBOperation::RealeaseICParamItem(ListICParmDataItem* pListICParamDataItem)
{
	ListICParmDataItem::iterator it ;
	//释放每个元素
	for (it = pListICParamDataItem->begin(); it != pListICParamDataItem->end(); )
	{
		ListICParmDataItem::iterator tempIt = it++ ;
		if (*tempIt != NULL)
		{
			delete *tempIt ;
			*tempIt = NULL ;
		}
		pListICParamDataItem->erase(tempIt) ;
	}
}

//根据银行ID，获取银行名称
int CDBOperation::GetBankName(char* pOrganID, char *outBankName)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 

		char pBankName[128]={0};
		char szOraganID[6] = {0};

		EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;
	
	memcpy(szOraganID, pOrganID, 4);	//只取前4位
	
	
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL select BankName
		into :pBankName
		from tab_bankorgan where BankOrganID=:szOraganID;
	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
G_DB_DEBUG("select BankName from tab_bankorgan where BankOrganID='%s'",szOraganID);

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"无银行卡信息 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		strcpy(outBankName, pOrganID);
		return -1;
	}	
	RTrim(pBankName);
	if(strlen(pBankName)<=0){
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"无银行卡信息 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		strcpy(outBankName, pOrganID);
		return -1;

	}
	EXEC SQL COMMIT;
	strcpy(outBankName, pBankName);
	return 0;
		
/////////////////////////////////
}

/*
* 名称: GetScrollInfo
*
* 参数: 
*	const char* pPsamID
*	char* pScrollInfo 
*
* 返回值: 0: 成功获取滚动条
*	 -1: 没有需要更新的滚动条
*	
* 说明: 获取滚动条信息
*
*/
int CDBOperation::GetScrollInfo( const char* pPsamID, char* pScrollInfo )
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 

		char pTermNo[9]={0};
		int nUpdateFlag;
		char szScrollInfo[129] = { 0 } ;

	EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;
	
	strcpy(pTermNo, pPsamID);
	
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL SELECT ScrollInfo
		into :szScrollInfo
		FROM tab_term WHERE TermNo=:pTermNo AND UpdateFlag=0;
	if (SQLCODE){
G_DB_DEBUG("%d | %s 1\n",pthread_self(), __FUNCTION__);
G_DB_DEBUG("SELECT ScrollInfo FROM tab_term WHERE TermNo='%s' AND UpdateFlag=0", pPsamID);

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"GetScrollInfo失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		return -1;
	}	
	RTrim(szScrollInfo);
	if(strlen(szScrollInfo)<=64){
		EXEC SQL UPDATE tab_term SET UpdateFlag = 1 WHERE TermNo=:pTermNo;
		if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
G_DB_DEBUG("UPDATE tab_term SET UpdateFlag = 1 WHERE TermNo='%s';", pPsamID);

			LogTransMsg((char *)__FILE__, __LINE__, (char *)"GetScrollInfo失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
			return -1;
		}	

	}
	EXEC SQL COMMIT;
	strcpy(pScrollInfo, szScrollInfo);
	return 0;
		
/////////////////////////////////

}

int CDBOperation::GetLastTrade(ST_TranData* stTranData)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 

		char pTermNo[9]={0};

		
		
		char pIssuerNo[12]={0};
		char pAcquirerNo[13]={0};
		char pBankRetCode[4]={0};
		char pPlatTermNo[9]={0};
		char pPlatMerchantNo[16]={0};
		long long dTranAmt=0;
		char pOutAccount[21]={0};
		char pReferenceNumber[13]={0};
		char pBatchNo[7]={0}; 
		char pBankTime[8]={0};
		char pAuthorCode[7]={0};
		char pPlatSerialNo[7]={0};
		char pTranType[6]={0};
		char pBankDate[11]={0};
		char pAcquiringIDCode[21]={0}; 
		
		
		
	EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;
	
	strcpy(pTermNo, stTranData->szTermNo);
	
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	


	EXEC SQL select IssuerNo,AcquirerNo,BankRetCode,PlatTermNo,PlatMerchantNo,TranAmt,OutAccount,ReferenceNumber,BatchNo, Replace(BankTime,':','') as BankTime,PlatSerialNo,TranType,BankDate,AcquiringIDCode
		into :pIssuerNo,:pAcquirerNo,:pBankRetCode,:pPlatTermNo,:pPlatMerchantNo,:dTranAmt,:pOutAccount,:pReferenceNumber,:pBatchNo ,:pBankTime,:pPlatSerialNo,:pTranType,:pBankDate,:pAcquiringIDCode 
		from (select IssuerNo,AcquirerNo,BankRetCode,PlatTermNo,PlatMerchantNo,TranAmt,OutAccount,ReferenceNumber,BatchNo , BankTime,PlatSerialNo,TranType,BankDate,AcquiringIDCode  
				from tab_support 
				where TermNo=:pTermNo and BankRetCode='00' and CancelFlag=0
				order by BANKDATE desc , BANKTIME DESC )
		where rownum<=1 ;
		
	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
G_DB_DEBUG("select IssuerNo,AcquirerNo,BankRetCode,PlatTermNo,PlatMerchantNo,TranAmt,OutAccount,ReferenceNumber,BatchNo ,Replace(BankTime,':','') as BankTime,PlatSerialNo,TranType,BankDate,AcquiringIDCode from tab_support where TermNo='%s' and BankRetCode='00' and CancelFlag=0 order by Bankdate desc,BankTime desc limit 0,1", stTranData->szTermNo);

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"GetLastTrade 获取末笔信息失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		memcpy(stTranData->szRetCode_39,"D5",2);
		return -1;
	}	

	strcpy(stTranData->szOutAccount_2 , RTrim(pOutAccount));
	sprintf(stTranData->szAmount_4, "%ld", dTranAmt);
	strcpy(stTranData->szReferenceNumber_37 , RTrim(pReferenceNumber));
	strcpy(stTranData->szBatchNo , RTrim(pBatchNo));
	strcpy(stTranData->szBankTime_12 , RTrim(pBankTime));
	
	strcpy(stTranData->szOriginalTranDate , RTrim(pBankDate));
	strcpy(stTranData->szTraceNumber_11 , RTrim(pPlatSerialNo));
	strcpy(stTranData->szTranType , RTrim(pTranType));
	strcpy(stTranData->szAcquiringIDCode_32 , RTrim(pAcquiringIDCode));
	strcpy(stTranData->szTerminalID_41 , RTrim(pPlatTermNo));
	strcpy(stTranData->szMerchantID_42 , RTrim(pPlatMerchantNo));
	strcpy(stTranData->szAcquirerNo , RTrim(pAcquirerNo));
	strcpy(stTranData->szIssuerNo , RTrim(pIssuerNo));

	return 0;
///////////////////////////////////



}

int CDBOperation::InsertICUnTouchUnLinkData(ICUnTouchUnLinkData* pICDataItem)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 

		char pTermNo[9]={0};

		
		
		char pTradeMoney[20]={0};
		char pMerchantID[16]={0};
		char ICardData[501]={0};
		char OutAccount[26]={0};
		char CardSerno[5]={0};

		char szTermDate[8+1] = { 0 } ;
		char szTermTime[8+1] = { 0 } ; 
		char szSerial[6+1] = { 0 } ;
		
	EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;
	
	strcpy(pTermNo, pICDataItem->szTermID);
	strcpy(pTradeMoney, pICDataItem->szMoney);
	strcpy(pMerchantID, pICDataItem->szMerchantID);
	strcpy(ICardData, pICDataItem->sz55AreaBuff);
	strcpy(OutAccount, pICDataItem->szCardNum);
	strcpy(CardSerno, pICDataItem->szICSerial);

	memcpy(szTermDate, pICDataItem->szReferenceNumber, 8) ;
	memcpy(szSerial, pICDataItem->szReferenceNumber+8, 6) ;
	
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL insert into tab_icconsumetrade(TermNo, TradeMoney, TermDate, TermTime, TermSerNo, MerchantID, ICardData, OutAccount,CardSerno) 
	VALUES(:pTermNo, :pTradeMoney, :szTermDate, "", :szSerial, :pMerchantID, :ICardData, :OutAccount, :CardSerno);
	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
G_DB_DEBUG("insert into tab_icconsumetrade(TermNo, TradeMoney, TermDate, TermTime, TermSerNo, MerchantID, ICardData, OutAccount,CardSerno) VALUES('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')",
				pICDataItem->szTermID, pICDataItem->szMoney, szTermDate, "",szSerial, pICDataItem->szMerchantID, pICDataItem->sz55AreaBuff, 
				pICDataItem->szCardNum, pICDataItem->szICSerial) ;

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"InsertICUnTouchUnLinkData 失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		return false ;
	}	
	EXEC SQL COMMIT;
	return true ;

///////////////////////////////////
}


//通过银行卡号取出银行卡的发卡行名称
int CDBOperation::GetBankNameByCardNo(const char* pCardNo, char * pBankName) 
{
		struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 

		char pBankID[9]={0};
		char strCardNo[9]={0};

		int nCardBinL;
		int nCardType;
		char strBankName[51]={0};
		
		
		
	EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;
	
	strcpy(strCardNo, pCardNo);
	
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL select BankID,BankName,CardType,Len(CardBin) 
		into :pBankID, :strBankName, :nCardType, :nCardBinL
		from tab_cardinfo where CardBin=left(:strCardNo, Len(CardBin))  order by Len(CardBin) desc;
	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
G_DB_DEBUG("select BankID,BankName,CardType,Len(CardBin) from tab_cardinfo where CardBin=left('%s', Len(CardBin))  order by Len(CardBin) desc limit 0,1", pCardNo) ;

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"GetBankNameByCardNo 失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		return -1;
	}	
	RTrim(strBankName);
	if (strlen(strBankName) > 0)
	{
		memcpy(pBankName, strBankName, strlen(strBankName)) ;
	}
	else
	{
		LogTransMsg((char *)__FILE__, __LINE__, (char *)"GetBankNameByCardNo -- 取银行卡名称出错 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		return -1;
	}
	EXEC SQL COMMIT;
	return 0 ;

///////////////////////////////////
}

int CDBOperation::GetDayTrade(const char* pTermNo, const char* pTradeType, const char* pDate, long& lCount, long long& lSum) 
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 

		char strTermNo[9]={0};
		char strTradeType[5]={0};
		char strDate[11]={0};
		
		long outCount;
		long long outSum;
		
		
	EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;
	
	strcpy(strTermNo, pTermNo);
	strcpy(strTradeType, pTradeType);
	strcpy(strDate, pDate);
	
G_DB_DEBUG("%d | %s | start %s %s %s 5\n",pthread_self(), __FUNCTION__, strTermNo, strTradeType, strDate);	
	EXEC SQL select NVL(count(TranAmt),0), NVL(Sum(TranAmt),0)
		into :outCount, :outSum
		from tab_support where TermNo=:strTermNo and TranType=:strTradeType and LocalDate=:strDate and CancelFlag=0 and BankRetCode='00';


	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
G_DB_DEBUG("select count(ID) as TradeCount, Sum(TranAmt) as TradeSum from tab_support where TermNo='%s' and TranType='%s' and LocalDate='%s' and CancelFlag=0 and BankRetCode='00' ", pTermNo, pTradeType, pDate) ;

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"GetDayTrade 失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		return -1;
	}	
	EXEC SQL COMMIT;

	lCount = outCount;
	lSum = outSum;
	
	
	return 0 ;

}


int CDBOperation::GetCardBindInfo(const char* pCardNo, char* pMobile, int& nRightFlag, int& nTryTimes, long long& lDaySum) 
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 

	
		char strCardNo [22]={0};
		char strMobile [11]={0};
		long long dDaySum;
		int nIsRight;
		int nErrTimes;
		char strLastTime [14]={0};
	

		
		
	EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;
	
	strcpy(strCardNo, pCardNo);
	
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL select Mobile, DaySum, IsRight, ErrTimes 
		into :strMobile, :dDaySum, :nIsRight, nErrTimes
		from tab_cardbindmobile where CardNo=:strCardNo;

	if (SQLCODE==SQLNOTFOUND)
	{
G_DB_DEBUG("%d | %s 1\n",pthread_self(), __FUNCTION__);
		LogTransMsg((char *)__FILE__, __LINE__, (char *) "GetCardBindInfo 失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		return -1;
	}
	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
G_DB_DEBUG("select Mobile, DaySum, IsRight, ErrTimes from tab_cardbindmobile where CardNo='%s'", pCardNo) ;

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"GetCardBindInfo 失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		return -1;
	}	
	EXEC SQL COMMIT;
	
	strcpy(pMobile, RTrim(strMobile));
	nRightFlag = nIsRight;
	nTryTimes = nErrTimes;
	lDaySum = dDaySum;
	
	return 0 ;

}

int CDBOperation::GetCreditBankList(st_bank_credit_t *bank_info, int *num)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 
		int	nRetCode = 0 ;

		char subtradecode[6];
		char bankname[32];
		char banknum[32];
		char memo[256];
    EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;
	

 G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
   EXEC SQL DECLARE cur_GetCreditBankList_user CURSOR FOR select subtradecode, bankname, banknum, memo from tab_creditcardbank;    
    EXEC SQL OPEN cur_GetCreditBankList_user;  
  	nRetCode =  0 ;

    while(1)  
    {  
		ICParmDataItem* pICParamData = new ICParmDataItem ;
       EXEC SQL FETCH cur_GetCreditBankList_user 	into :subtradecode, :bankname, :banknum, :memo;
		if (SQLCODE == 1403){
			break;
		}
		RTrim(subtradecode);
		strcpy(bank_info->subtradecode, subtradecode);
		RTrim(bankname);
		strcpy(bank_info->bankname, bankname);
		RTrim(banknum);
		strcpy(bank_info->banknum, banknum);
		RTrim(memo);
		strcpy(bank_info->memo, memo);
		nRetCode++ ;
   }  
    EXEC SQL  CLOSE cur_GetCreditBankList_user;
	EXEC SQL COMMIT;
	
	*num = nRetCode;
	
	return nRetCode;

}
int CDBOperation::RecordMobileInfo(const char* pCardNo, const char* pMobile)
{
	
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 

	
		char strCardNo [22]={0};
		char strMobile [11]={0};
		char szDate[9] = {0};
		char szTime[7] = {0};
	

		char szdate[20]={0};
		
	EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;
	
	strcpy(strCardNo, pCardNo);
	strcpy(strMobile, pMobile);
	GetstrCurDate( NULL,szDate);
	GetstrCurTime(NULL, szTime);
	sprintf(szdate, "%s%s", szDate, szTime);
	
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL insert into tab_cardbindmobile(CardNo, Mobile, DaySum, IsRight, ErrTimes, LastTime) VALUES(:strCardNo, :strMobile, 0, 0, 0, :szdate);


	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
G_DB_DEBUG("insert into tab_cardbindmobile(CardNo, Mobile, DaySum, IsRight, ErrTimes, LastTime) VALUES('%s', '%s', 0, 0, 0, '%s%s')" ,
		pCardNo, pMobile, szDate, szTime);

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"RecordMobileInfo 失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
			return false ;
	}	
	EXEC SQL COMMIT;
	return true ;
	
}

int CDBOperation::UpdateMobileErrTimes(const char* pCardNo)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 

	
		char strCardNo [22]={0};
		
	EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;
	
	strcpy(strCardNo, pCardNo);
	
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL update tab_cardbindmobile set ErrTimes=ErrTimes+1 where CardNo=:strCardNo;


	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
G_DB_DEBUG("update tab_cardbindmobile set ErrTimes=ErrTimes+1 where CardNo='%s' ",pCardNo);

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"UpdateMobileErrTimes 失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
			return -1 ;
	}	
	EXEC SQL COMMIT;
	return 0 ;
	

}

int CDBOperation::UpdateMobileErrTimes(const char* pCardNo, const char* pMobile)
{
	
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 

	
		char strCardNo [22]={0};
		char strMobile [11]={0};
		
	EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;
	
	strcpy(strCardNo, pCardNo);
	strcpy(strMobile, pMobile);
	
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL update tab_cardbindmobile set Mobile=:strMobile, ErrTimes=ErrTimes+1 where CardNo=strCardNo;


	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
G_DB_DEBUG("update tab_cardbindmobile set Mobile='%s', ErrTimes=ErrTimes+1 where CardNo='%s' ", pMobile, pCardNo);

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"UpdateMobileErrTimes 失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
			return -1 ;
	}	
	return 0 ;
	
}

int CDBOperation::UpdateCardBindMobile(const char* pCardNo, const char* pMobile)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 

	
		char strCardNo [22]={0};
		char strMobile [11]={0};
		
	EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;
	
	strcpy(strCardNo, pCardNo);
	strcpy(strMobile, pMobile);
	
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL update tab_cardbindmobile set Mobile=:strMobile, IsRight=1 where CardNo=strCardNo;


	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
G_DB_DEBUG("update tab_cardbindmobile set Mobile='%s', IsRight=1 where CardNo='%s' ", pMobile, pCardNo);

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"UpdateMobileErrTimes 失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
			return -1 ;
	}	
	EXEC SQL COMMIT;
	return 0 ;

}

int CDBOperation::UpdateMobileDaySum(const char* pCardNo, long long lMoney)
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 

	
		char strCardNo [22]={0};
		long long  dMoney;
		
	EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;
	
	strcpy(strCardNo, pCardNo);
	dMoney = lMoney;
	
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL update tab_cardbindmobile set DaySum=DaySum+:dMoney where CardNo=:strCardNo;


	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
G_DB_DEBUG("update tab_cardbindmobile set DaySum=DaySum+%I64d where CardNo='%s' ", lMoney, pCardNo);

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"UpdateMobileDaySum 失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
			return -1 ;
	}	
	EXEC SQL COMMIT;
	return 0 ;
	
}


int CDBOperation::CheckNeedCardID(const char* pCardNo) 
{
	struct sqlca sqlca;
	EXEC SQL BEGIN DECLARE SECTION;
		sql_context *DBcontest = (sql_context *)m_pDBAccess;                                                                                                                 

	
		char strCardNo [22]={0};
		int strCardNo_l;
		int nCheckHolderFlag = 0;
		
	EXEC SQL END DECLARE SECTION;
	

	EXEC SQL CONTEXT USE :*DBcontest;
	
	strcpy(strCardNo, pCardNo);
	strCardNo_l = strlen(strCardNo);
	
G_DB_DEBUG("%d | %s | start 5\n",pthread_self(), __FUNCTION__);	
	EXEC SQL select CheckHolderFlag
		into :nCheckHolderFlag
		from tab_cardinfo
		where CardBin=left(:strCardNo, Len(CardBin)) and CardLen=:strCardNo_l order by CardBin desc;

	if (SQLCODE==SQLNOTFOUND)
	{
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
		LogTransMsg((char *)__FILE__, __LINE__, (char *) "CheckNeedCardID 失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		return -1;
	}

	if (SQLCODE){
G_DB_DEBUG("%d | %s 2\n",pthread_self(), __FUNCTION__);
G_DB_DEBUG("select CheckHolderFlag from tab_cardinfo where CardBin=left('%s', Len(CardBin)) and CardLen=%d order by CardBin desc limit 0,1", pCardNo, strlen(pCardNo)) ;

		LogTransMsg((char *)__FILE__, __LINE__, (char *)"CheckNeedCardID 失败 SQLCODE=[%d], SQLMSG=[%s]", SQLCODE, SQLERRMSG);
		return -1 ;
	}
	EXEC SQL COMMIT;
	
	return nCheckHolderFlag ;
	


}


